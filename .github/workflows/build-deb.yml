name: Build a Debian package

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-deb:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ 'debian', 'raspios' ]
        include:
          - os: debian
            dist: buster
            arch: amd64
            keyring_cmd: sudo apt-get install -y debian-archive-keyring
          - os: raspios
            dist: buster
            arch: armhf
            keyring_cmd: wget http://archive.raspbian.org/raspbian/pool/main/r/raspbian-archive-keyring/raspbian-archive-keyring_20120528.2_all.deb && sudo dpkg -i raspbian-archive-keyring_20120528.2_all.deb
    defaults:
      run:
        working-directory: backend

    name: Build a Debian package for ${{ matrix.os }}-${{ matrix.dist }}-${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip pipenv
          python --version; python -m pip --version; pipenv --version
      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-3.8-pipenv-${{ hashFiles('**/Pipfile.lock') }}
      - name: Setup backend project with pipenv
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv install --dev

      - id: cache-npm
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-
      - name: Setup frontend project with npm
        working-directory: frontend/smartmeter-datacollector-configurator
        run: |
          npm ci --ignore-scripts

      - name: Prepare to build a Debian source package
        run: |
          sudo apt-get -y install python3-all debhelper dh-python dh-systemd

      - name: Build a Debian source package
        run: |
          pipenv run build_srcdeb

      - id: cache-pbuilder-chroot
        uses: actions/cache@v1
        with:
          path: /var/cache/pbuilder/${{ matrix.os }}-${{ matrix.dist }}-${{ matrix.arch }}-base.tgz
          key: ${{ runner.os }}-pbuilder-${{ matrix.os }}-${{ matrix.dist }}-${{ matrix.arch }}-${{ hashFiles('**/Pipfile.lock') }}
      - name: Prepare the pbuilder chroot for ${{ matrix.os }}-${{ matrix.dist }}-${{ matrix.arch }}
        if: steps.cache-pbuilder-${{ matrix.os }}-${{ matrix.dist }}-${{ matrix.arch }}-chroot.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install -y pbuilder qemu-user-static
          ${{ matrix.keyring_cmd }}
          sudo cp scripts/.pbuilderrc /root/
          sudo mkdir -p /var/cache/pbuilder/${{ matrix.os }}-${{ matrix.dist }}-${{ matrix.arch }}/aptcache/
          sudo OS=${{ matrix.os }} DIST=${{ matrix.dist }} ARCH=${{ matrix.arch }} pbuilder --create

      - name: Build the Debian package for ${{ matrix.os }}-${{ matrix.dist }}-${{ matrix.arch }} using pbuilder
        run: |
          cd deb_dist
          sudo OS=${{ matrix.os }} DIST=${{ matrix.dist }} ARCH=${{ matrix.arch }} pbuilder build *.dsc

      - name: Archive the built Debian package for ${{ matrix.os }}-${{ matrix.dist }}-${{ matrix.arch }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-${{ matrix.dist }}-${{ matrix.arch }}-deb
          path: /var/cache/pbuilder/${{ matrix.os }}-${{ matrix.dist }}-${{ matrix.arch }}/result/*.deb

      - name: Archive the additional Debian package files for ${{ matrix.os }}-${{ matrix.dist }}-${{ matrix.arch }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-${{ matrix.dist }}-${{ matrix.arch }}-packagefiles
          path: |
            /var/cache/pbuilder/${{ matrix.os }}-${{ matrix.dist }}-${{ matrix.arch }}/result/*.dsc
            /var/cache/pbuilder/${{ matrix.os }}-${{ matrix.dist }}-${{ matrix.arch }}/result/*.tar.*

      - name: Get the tag name
        id: tag-name
        if: startsWith(github.ref, 'refs/tags')
        uses: olegtarasov/get-tag@v2.1.1

      - name: Create a new release
        if: startsWith(github.ref, 'refs/tags')
        uses: ncipollo/release-action@v1.8.8
        with:
          allowUpdates: true
          artifacts: /var/cache/pbuilder/${{ matrix.os }}-${{ matrix.dist }}-${{ matrix.arch }}/result/*.deb
          draft: true
          name: Smart Meter Data Collector Configurator ${{ steps.tag-name.outputs.tag }}
          omitBody: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}
